import{_ as i,c as e,o as n,d as a}from"./app.60944cd0.js";const S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"spring 框架","slug":"spring-框架","link":"#spring-框架","children":[]},{"level":3,"title":"Spring的介绍","slug":"spring的介绍","link":"#spring的介绍","children":[]},{"level":3,"title":"Spring提供的容器又称为IoC容器，什么是IoC？","slug":"spring提供的容器又称为ioc容器-什么是ioc","link":"#spring提供的容器又称为ioc容器-什么是ioc","children":[]}],"relativePath":"devm/java/spring/index.md"}'),r={name:"devm/java/spring/index.md"},o=a('<h3 id="spring-框架" tabindex="-1">spring 框架 <a class="header-anchor" href="#spring-框架" aria-hidden="true">#</a></h3><ul><li>Spring是什么</li><li>Spring带来了什么</li><li>Spring有什么好处</li><li>Spring结构图</li><li>Spring应用场景</li></ul><h3 id="spring的介绍" tabindex="-1">Spring的介绍 <a class="header-anchor" href="#spring的介绍" aria-hidden="true">#</a></h3><p><code>Spring是一个开发应用框架，什么样的框架呢，有这么几个标签：轻量级、非侵入式、一站式、模块化，其目的是用于简化企业级应用程序开发。</code></p><p>我们知道应用程序是由一组相互协作的对象组成，而在传统应用程序开发中，一个完整的应用是由一组相互协作的对象组成。所以开发一个应用除了要开发业务逻辑之外，最多的是关注如何使这些对象协作来完成所需功能，而且要低耦合、高内聚。业务逻辑开发是不可避免的，那如果有个框架出来帮我们来创建对象及管理这些对象之间的依赖关系。当然，我们也可以通过自我能力，利用前人总结出来的设计模式来进行我们的架构设计，比如常见的「工厂模式」、「代理模式」等，总共有23种模式，利用别人总结的轮子来进行我们自己轮子建造，但如何这些轮子建造专门交给一个叫做Spring的人去帮你做，你只需要专心你的业务逻辑，是不是省心很多，同时这个叫Spring干的又专业又稳定，何乐而不为呢。</p><h3 id="spring提供的容器又称为ioc容器-什么是ioc" tabindex="-1">Spring提供的容器又称为IoC容器，什么是IoC？ <a class="header-anchor" href="#spring提供的容器又称为ioc容器-什么是ioc" aria-hidden="true">#</a></h3><p>IoC全称Inversion of Control，直译为控制反转。那么何谓IoC？ IoC又称为依赖注入（DI：Dependency Injection），它解决了一个最主要的问题：将组件的创建+配置与组件的使用相分离，并且，由IoC容器负责管理组件的生命周期。</p><p>因为IoC容器要负责实例化所有的组件，因此，有必要告诉容器如何创建组件，以及各组件的依赖关系。一种最简单的配置是通过XML文件来实现，例如： 在Spring的IoC容器中，我们把所有组件统称为JavaBean，即配置一个组件就是配置一个Bean</p><p>JavaBean 是 Java 平台中一种特殊的类，它是一种符合 JavaBeans 规范的可重用组件，主要用于在 Java 应用程序中传递数据。JavaBean 是一个无状态的对象，它封装了一个或多个属性，并通过 getter 和 setter 方法来提供对这些属性的访问。JavaBean 还可以实现一些其他的特定接口，如 Serializable 和 Cloneable 接口，以便于将其序列化和复制</p>',9),p=[o];function s(t,l,c,d,g,_){return n(),e("div",null,p)}const v=i(r,[["render",s]]);export{S as __pageData,v as default};
