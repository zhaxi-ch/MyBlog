import{_ as a,c as t,o as s,d as i}from"./app.0fdc3d94.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"git相关的内容","slug":"git相关的内容","link":"#git相关的内容","children":[{"level":3,"title":"1.git init","slug":"_1-git-init","link":"#_1-git-init","children":[]},{"level":3,"title":"2.git add","slug":"_2-git-add","link":"#_2-git-add","children":[]},{"level":3,"title":"3. git commit 初始版本","slug":"_3-git-commit-初始版本","link":"#_3-git-commit-初始版本","children":[]},{"level":3,"title":"4. git branch 设置主分支","slug":"_4-git-branch-设置主分支","link":"#_4-git-branch-设置主分支","children":[]},{"level":3,"title":"5. git remote add  origin","slug":"_5-git-remote-add-origin","link":"#_5-git-remote-add-origin","children":[]},{"level":3,"title":"6.提交到仓库","slug":"_6-提交到仓库","link":"#_6-提交到仓库","children":[]},{"level":3,"title":"7.报错对应","slug":"_7-报错对应","link":"#_7-报错对应","children":[]},{"level":3,"title":"将仓库内容推送到远程的仓库","slug":"将仓库内容推送到远程的仓库","link":"#将仓库内容推送到远程的仓库","children":[]},{"level":3,"title":"常用的问题","slug":"常用的问题","link":"#常用的问题","children":[]},{"level":3,"title":"要在GitHub上合并其他分支，你可以按照以下步骤进行操作：","slug":"要在github上合并其他分支-你可以按照以下步骤进行操作","link":"#要在github上合并其他分支-你可以按照以下步骤进行操作","children":[]}]}],"relativePath":"study/git/index.md"}'),e={name:"study/git/index.md"},n=i(`<h2 id="git相关的内容" tabindex="-1">git相关的内容 <a class="header-anchor" href="#git相关的内容" aria-hidden="true">#</a></h2><h3 id="_1-git-init" tabindex="-1">1.git init <a class="header-anchor" href="#_1-git-init" aria-hidden="true">#</a></h3><p>git init 是 Git 命令之一，用于在当前目录中初始化一个新的 Git 仓库。执行 git init 命令后，Git 会在当前目录中创建一个名为 .git 的子目录，用于存储 Git 仓库的相关信息。这些信息包括版本历史记录、分支、标签等等。在执行 git init 命令后，您可以使用其他 Git 命令来管理和维护您的代码库</p><h3 id="_2-git-add" tabindex="-1">2.git add <a class="header-anchor" href="#_2-git-add" aria-hidden="true">#</a></h3><p>git add 是 Git 命令之一，用于将当前目录中的所有文件添加到 Git 仓库的暂存区。执行 git add . 命令后，Git 会将当前目录中的所有文件添加到暂存区，但不会将它们提交到版本库中。这意味着您可以在提交之前对文件进行更改或编辑。如果您只想添加特定的文件！后面跟上指定的文件</p><h3 id="_3-git-commit-初始版本" tabindex="-1">3. git commit 初始版本 <a class="header-anchor" href="#_3-git-commit-初始版本" aria-hidden="true">#</a></h3><p>git commit -m &quot;Initial commit&quot; 是 Git 命令之一，用于将更改提交到 Git 仓库。执行 git commit -m &quot;Initial commit&quot; 命令后，Git 会将当前暂存区中的更改提交到版本库中，并将提交消息设置为 &quot;Initial commit&quot;。这意味着您已经完成了第一次提交，并为您的代码库创建了一个初始版本</p><h3 id="_4-git-branch-设置主分支" tabindex="-1">4. git branch 设置主分支 <a class="header-anchor" href="#_4-git-branch-设置主分支" aria-hidden="true">#</a></h3><p>git branch -M main 是 Git 命令之一，用于将当前分支重命名为 &quot;main&quot;。执行 git branch -M main 命令后，Git 会将当前分支重命名为 &quot;main&quot;，并将其设置为默认分支。这意味着在推送代码时，Git 将使用 &quot;main&quot; 分支而不是默认的 &quot;master&quot; 分支。这是因为 GitHub 已经决定将 &quot;master&quot; 分支更名为 &quot;main&quot; 分支，以避免使用一个带有历史负担的术语。</p><h3 id="_5-git-remote-add-origin" tabindex="-1">5. git remote add origin <a class="header-anchor" href="#_5-git-remote-add-origin" aria-hidden="true">#</a></h3><p>git remote add origin 是 Git 命令之一，用于将远程 Git 仓库的 URL 添加到本地 Git 仓库中。执行 git remote add origin <code>&lt;url&gt;</code> 命令后，Git 会将指定的 URL 添加到本地 Git 仓库中，并将其命名为 &quot;origin&quot;。这意味着您可以使用 &quot;origin&quot; 作为远程 Git 仓库的别名，而不必每次都输入完整的 URL。例如，如果您要将本地代码推送到远程 Git 仓库，可以使用以下命令： 其中，&quot;origin&quot; 是远程 Git 仓库的别名 git push -u origin main</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git remote add origin https://github.com/zhaxi-ch/vitepress.git</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="_6-提交到仓库" tabindex="-1">6.提交到仓库 <a class="header-anchor" href="#_6-提交到仓库" aria-hidden="true">#</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git push -u origin main</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="_7-报错对应" tabindex="-1">7.报错对应 <a class="header-anchor" href="#_7-报错对应" aria-hidden="true">#</a></h3><p>fatal: unable to access &#39;<a href="https://github.com/zhaxi-ch/vitepress.git/" target="_blank" rel="noreferrer">https://github.com/zhaxi-ch/vitepress.git/</a>&#39;: Encountered end of file</p><p>解决办法： 修改github对应的域名和ip</p><h4 id="ssh-密钥生成" tabindex="-1">SSH 密钥生成 <a class="header-anchor" href="#ssh-密钥生成" aria-hidden="true">#</a></h4><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">ssh-keygen</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rsa</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-b</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4096</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-C</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">417550867@qq.com</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>———————————————————————————————————</p><h3 id="将仓库内容推送到远程的仓库" tabindex="-1">将仓库内容推送到远程的仓库 <a class="header-anchor" href="#将仓库内容推送到远程的仓库" aria-hidden="true">#</a></h3><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git  push -f  git@github.com/zhaxi-ch/MyBlog.git  main:gh-pages</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>要查询当前本地仓库的名称，可以使用 git remote 命令。这个命令会显示当前本地仓库所关联的远程仓库的名称。例如，如果你想要查询当前本地仓库所关联的远程仓库的名称，可以运行以下命令：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git remote</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>这将显示当前本地仓库所关联的远程仓库的名称。如果你想要查看更详细的信息，可以使用 git remote -v 命令查看每个远程仓库的 URL。例如，如果你想要查看每个远程仓库的 URL，可以运行以下命令：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git remote -v</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>希望这可以帮助你查询当前本地仓库的名称 如何删除远程仓库的关联 要删除远程仓库的关联，可以使用 git remote remove 命令。这个命令会将本地仓库与指定的远程仓库的关联删除。例如，如果你想要删除本地仓库与名为 origin 的远程仓库的关联，可以运行以下命令：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git remote remove origin</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>这将删除本地仓库与名为 origin 的远程仓库的关联。请注意，这不会删除远程仓库本身，只会删除本地仓库与远程仓库的关联。希望这可以帮助你删除远程仓库的关联</p><hr><h3 id="常用的问题" tabindex="-1">常用的问题 <a class="header-anchor" href="#常用的问题" aria-hidden="true">#</a></h3><ul><li>.git提交的时候，如何将一些不需要的文件不提交</li></ul><ol><li>创建一个名为 .gitignore 的文件，将不需要提交的文件名添加到该文件中。例如，如果您想排除名为 node_modules 的文件夹，可以在 .gitignore 文件中添加以下内容：</li><li>将 .gitignore 文件添加到 Git 中：</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git add .gitignore</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ol start="3"><li>提交更改：</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git commit -m &quot;Add .gitignore file&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ol start="4"><li>现在，Git 将忽略 .gitignore 文件中列出的所有文件。如果您已经将不需要提交的文件添加到 Git 中，可以使用以下命令将其从 Git 中删除：</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git rm -r --cached node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>其中，filename 是您要删除的文件名。这将从 Git 中删除该文件，但不会删除实际的文件。希望这可以帮助您解决问题</p><h3 id="要在github上合并其他分支-你可以按照以下步骤进行操作" tabindex="-1">要在GitHub上合并其他分支，你可以按照以下步骤进行操作： <a class="header-anchor" href="#要在github上合并其他分支-你可以按照以下步骤进行操作" aria-hidden="true">#</a></h3><ol><li>首先，确保你已经克隆了你要合并的仓库到本地。你可以使用以下命令克隆仓库：</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git clone &lt;repository_url&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>其中 repository_url是仓库的URL。</p><ol start="2"><li>进入克隆的仓库目录：</li></ol><p>其中 repository_directory是仓库的本地目录。</p><ol start="3"><li>确保你当前所在的分支是要合并其他分支的目标分支。你可以使用以下命令查看当前分支：</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">   git branch</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>如果当前分支不是目标分支，请切换到目标分支：</p><p>其中 target_branch是目标分支的名称。</p><ol start="4"><li>执行合并操作。你可以使用以下命令将其他分支合并到目标分支：</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">   git merge &lt;other_branch&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>其中 other_branch是要合并的其他分支的名称。</p><ol start="5"><li><p>解决合并冲突（如果有）。如果在合并过程中出现冲突，你需要手动解决冲突。Git会在冲突的文件中标记出冲突的部分，你需要编辑这些文件并选择保留哪些更改。</p></li><li><p>提交合并结果。在解决冲突后，使用以下命令提交合并结果：</p></li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">   git commit -m &quot;Merge &lt;other_branch&gt; into &lt;target_branch&gt;&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>其中 other_branch是要合并的其他分支的名称，target_branch是目标分支的名称。</p><ol start="7"><li>将合并结果推送到GitHub仓库。使用以下命令将合并结果推送到GitHub仓库：</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git push origin &lt;target_branch&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>其中 target_branch 是目标分支的名称。</p><p>完成上述步骤后，你就成功地将其他分支合并到了目标分支，并将合并结果推送到了GitHub仓库。</p>`,59),l=[n];function o(p,c,r,d,g,h){return s(),t("div",null,l)}const m=a(e,[["render",o]]);export{C as __pageData,m as default};
