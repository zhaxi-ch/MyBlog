import{_ as a,c as e,o as l,d as i}from"./app.1a495af9.js";const j=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"基础规定和语法","slug":"基础规定和语法","link":"#基础规定和语法","children":[{"level":3,"title":"Java 常量","slug":"java-常量","link":"#java-常量","children":[]},{"level":3,"title":"JSR JCP 是啥","slug":"jsr-jcp-是啥","link":"#jsr-jcp-是啥","children":[]},{"level":3,"title":"布尔运算","slug":"布尔运算","link":"#布尔运算","children":[]},{"level":3,"title":"字符和字符串","slug":"字符和字符串","link":"#字符和字符串","children":[]},{"level":3,"title":"字符串连接","slug":"字符串连接","link":"#字符串连接","children":[]},{"level":3,"title":"从Java 13开始，字符串可以用\\"\\"\\"...\\"\\"\\"表示多行字符串（Text Blocks）了","slug":"从java-13开始-字符串可以用-表示多行字符串-text-blocks-了","link":"#从java-13开始-字符串可以用-表示多行字符串-text-blocks-了","children":[]},{"level":3,"title":"数组变量","slug":"数组变量","link":"#数组变量","children":[]},{"level":3,"title":"Java的格式化功能提供了多种占位符，可以把各种数据类型“格式化”成指定的字符串：","slug":"java的格式化功能提供了多种占位符-可以把各种数据类型-格式化-成指定的字符串","link":"#java的格式化功能提供了多种占位符-可以把各种数据类型-格式化-成指定的字符串","children":[]},{"level":3,"title":"要判断引用类型的变量内容是否相等，必须使用equals()方法","slug":"要判断引用类型的变量内容是否相等-必须使用equals-方法","link":"#要判断引用类型的变量内容是否相等-必须使用equals-方法","children":[]},{"level":3,"title":"while循环语句就是让计算机根据条件做循环计算，在条件满足时继续循环，条件不满足时退出循环。","slug":"while循环语句就是让计算机根据条件做循环计算-在条件满足时继续循环-条件不满足时退出循环。","link":"#while循环语句就是让计算机根据条件做循环计算-在条件满足时继续循环-条件不满足时退出循环。","children":[]},{"level":3,"title":"在Java中，while循环是先判断循环条件，再执行循环。而另一种do while循环则是先执行循环，再判断条件，条件满足时继续循环，条件不满足时退出。它的用法是","slug":"在java中-while循环是先判断循环条件-再执行循环。而另一种do-while循环则是先执行循环-再判断条件-条件满足时继续循环-条件不满足时退出。它的用法是","link":"#在java中-while循环是先判断循环条件-再执行循环。而另一种do-while循环则是先执行循环-再判断条件-条件满足时继续循环-条件不满足时退出。它的用法是","children":[]},{"level":3,"title":"冒泡排序","slug":"冒泡排序","link":"#冒泡排序","children":[]},{"level":3,"title":"命令行參數","slug":"命令行參數","link":"#命令行參數","children":[]},{"level":3,"title":"JAVA 字符的方法","slug":"java-字符的方法","link":"#java-字符的方法","children":[]},{"level":3,"title":"为了让编译器能自动检查某个值在枚举的集合内，并且，不同用途的枚举需要不同的类型来标记，不能混用，我们可以使用enum来定义枚举类：","slug":"为了让编译器能自动检查某个值在枚举的集合内-并且-不同用途的枚举需要不同的类型来标记-不能混用-我们可以使用enum来定义枚举类","link":"#为了让编译器能自动检查某个值在枚举的集合内-并且-不同用途的枚举需要不同的类型来标记-不能混用-我们可以使用enum来定义枚举类","children":[]},{"level":3,"title":"Math 类","slug":"math-类","link":"#math-类","children":[]}]}],"relativePath":"devm/java/jichu/index.md"}'),n={name:"devm/java/jichu/index.md"},t=i(`<h2 id="基础规定和语法" tabindex="-1">基础规定和语法 <a class="header-anchor" href="#基础规定和语法" aria-hidden="true">#</a></h2><h3 id="java-常量" tabindex="-1">Java 常量 <a class="header-anchor" href="#java-常量" aria-hidden="true">#</a></h3><p>常量在程序运行时是不能被修改的。 在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> PI </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3.1415927</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="jsr-jcp-是啥" tabindex="-1">JSR JCP 是啥 <a class="header-anchor" href="#jsr-jcp-是啥" aria-hidden="true">#</a></h3><ul><li>JSR规范：<code>Java Specification Request</code></li><li>JCP组织：<code>Java Community Process</code> 为了保证Java语言的规范性，SUN公司搞了一个JSR规范，凡是想给Java平台加一个功能，比如说访问数据库的功能，大家要先创建一个JSR规范，定义好接口，这样，各个数据库厂商都按照规范写出Java驱动程序，开发者就不用担心自己写的数据库代码在MySQL上能跑，却不能跑在PostgreSQL上。</li></ul><h3 id="布尔运算" tabindex="-1">布尔运算 <a class="header-anchor" href="#布尔运算" aria-hidden="true">#</a></h3><p>布尔运算的一个重要特点是短路运算</p><p>布尔运算是一种关系运算，包括以下几类：</p><ul><li>比较运算符：&gt;，&gt;=，&lt;，&lt;=，==，!=</li><li>与运算 &amp;&amp;</li><li>或运算 ||</li><li>非运算 ! <code>关系运算符的优先级从高到低依次是：</code></li></ul><p>!</p><blockquote><p>，&gt;=，&lt;，&lt;= ==，!= &amp;&amp; ||</p></blockquote><h3 id="字符和字符串" tabindex="-1">字符和字符串 <a class="header-anchor" href="#字符和字符串" aria-hidden="true">#</a></h3><p>在Java中，字符和字符串是两个不同的类型。</p><p>字符类型 字符类型char是基本数据类型，它是character的缩写。一个char保存一个Unicode字符：</p><h3 id="字符串连接" tabindex="-1">字符串连接 <a class="header-anchor" href="#字符串连接" aria-hidden="true">#</a></h3><p>Java的编译器对字符串做了特殊照顾，可以使用+连接任意字符串和其他数据类型，这样极大地方便了字符串的处理。例如：</p><p><code>如果用+连接字符串和其他数据类型，会将其他数据类型先自动转型为字符串，再连接</code></p><h3 id="从java-13开始-字符串可以用-表示多行字符串-text-blocks-了" tabindex="-1">从Java 13开始，字符串可以用&quot;&quot;&quot;...&quot;&quot;&quot;表示多行字符串（Text Blocks）了 <a class="header-anchor" href="#从java-13开始-字符串可以用-表示多行字符串-text-blocks-了" aria-hidden="true">#</a></h3><h3 id="数组变量" tabindex="-1">数组变量 <a class="header-anchor" href="#数组变量" aria-hidden="true">#</a></h3><p>定义一个数组类型的变量，使用数组类型“类型[]”，例如，int[]。和单个基本类型变量不同，数组变量初始化必须使用new int[5]表示创建一个可容纳5个int元素的数组。</p><p>Java的数组有几个特点：</p><p>数组所有元素初始化为默认值，整型都是0，浮点型是0.0，布尔型是false； 数组一旦创建后，大小就不可改变。 要访问数组中的某一个元素，需要使用索引。数组索引从0开始，例如，5个元素的数组，索引范围是0~4。</p><p>可以修改数组中的某一个元素，使用赋值语句，例如，ns[1] = 79;</p><h3 id="java的格式化功能提供了多种占位符-可以把各种数据类型-格式化-成指定的字符串" tabindex="-1">Java的格式化功能提供了多种占位符，可以把各种数据类型“格式化”成指定的字符串： <a class="header-anchor" href="#java的格式化功能提供了多种占位符-可以把各种数据类型-格式化-成指定的字符串" aria-hidden="true">#</a></h3><p>占位符 说明 %d 格式化输出整数 %x 格式化输出十六进制整数 %f 格式化输出浮点数 %e 格式化输出科学计数法表示的浮点数 %s 格式化字符串 注意，由于%表示占位符，因此，连续两个%%表示一个%字符本身</p><h3 id="要判断引用类型的变量内容是否相等-必须使用equals-方法" tabindex="-1">要判断引用类型的变量内容是否相等，必须使用equals()方法 <a class="header-anchor" href="#要判断引用类型的变量内容是否相等-必须使用equals-方法" aria-hidden="true">#</a></h3><p>对于多个==判断的情况，使用switch结构更加清晰。</p><h3 id="while循环语句就是让计算机根据条件做循环计算-在条件满足时继续循环-条件不满足时退出循环。" tabindex="-1">while循环语句就是让计算机根据条件做循环计算，在条件满足时继续循环，条件不满足时退出循环。 <a class="header-anchor" href="#while循环语句就是让计算机根据条件做循环计算-在条件满足时继续循环-条件不满足时退出循环。" aria-hidden="true">#</a></h3><h3 id="在java中-while循环是先判断循环条件-再执行循环。而另一种do-while循环则是先执行循环-再判断条件-条件满足时继续循环-条件不满足时退出。它的用法是" tabindex="-1">在Java中，while循环是先判断循环条件，再执行循环。而另一种do while循环则是先执行循环，再判断条件，条件满足时继续循环，条件不满足时退出。它的用法是 <a class="header-anchor" href="#在java中-while循环是先判断循环条件-再执行循环。而另一种do-while循环则是先执行循环-再判断条件-条件满足时继续循环-条件不满足时退出。它的用法是" aria-hidden="true">#</a></h3><h3 id="冒泡排序" tabindex="-1">冒泡排序 <a class="header-anchor" href="#冒泡排序" aria-hidden="true">#</a></h3><h3 id="命令行參數" tabindex="-1">命令行參數 <a class="header-anchor" href="#命令行參數" aria-hidden="true">#</a></h3><p>Java程序的入口是main方法，而main方法可以接受一个命令行参数，它是一个String[]数组。</p><h3 id="java-字符的方法" tabindex="-1">JAVA 字符的方法 <a class="header-anchor" href="#java-字符的方法" aria-hidden="true">#</a></h3><h4 id="用stringjoiner的结果少了前面的-hello-和结尾的-遇到这种情况-需要给stringjoiner指定-开头-和-结尾-这个内置方法-可以去头尾" tabindex="-1">用StringJoiner的结果少了前面的&quot;Hello &quot;和结尾的&quot;!&quot;！遇到这种情况，需要给StringJoiner指定“开头”和“结尾” （这个内置方法，可以去头尾） <a class="header-anchor" href="#用stringjoiner的结果少了前面的-hello-和结尾的-遇到这种情况-需要给stringjoiner指定-开头-和-结尾-这个内置方法-可以去头尾" aria-hidden="true">#</a></h4><h3 id="为了让编译器能自动检查某个值在枚举的集合内-并且-不同用途的枚举需要不同的类型来标记-不能混用-我们可以使用enum来定义枚举类" tabindex="-1">为了让编译器能自动检查某个值在枚举的集合内，并且，不同用途的枚举需要不同的类型来标记，不能混用，我们可以使用enum来定义枚举类： <a class="header-anchor" href="#为了让编译器能自动检查某个值在枚举的集合内-并且-不同用途的枚举需要不同的类型来标记-不能混用-我们可以使用enum来定义枚举类" aria-hidden="true">#</a></h3><h3 id="math-类" tabindex="-1">Math 类 <a class="header-anchor" href="#math-类" aria-hidden="true">#</a></h3><p>顾名思义，Math类就是用来进行数学计算的，它提供了大量的静态方法来便于我们实现数学计算：</p>`,38),h=[t];function r(d,s,c,o,p,u){return l(),e("div",null,h)}const g=a(n,[["render",r]]);export{j as __pageData,g as default};
